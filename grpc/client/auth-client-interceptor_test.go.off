package client_test

// func TestAuthClientInterceptor(t *testing.T) {
//
// }

// type AuthClientInterceptorTestSuite struct {
// 	*testpb.InterceptorTestSuite
//
// 	mockClock    clock.Clock
// 	mockJwtToken *mockJWTToken.MockJwtToken
//
// 	authServerInterceptor *server.AuthServerInterceptor
// }

// func TestAuthClientInterceptor(t *testing.T) {
// 	assert.NoError(t, flag.Set("use_tls", "false"))
//
// 	testSuite := &AuthClientInterceptorTestSuite{}
//
// 	testSuite.mockJwtToken = mockJWTToken.NewMockJwtToken(t)
// 	testSuite.authServerInterceptor = server.NewAuthServerInterceptorWithCustomParser(testSuite.mockJwtToken)
// 	testSuite.mockClock = clock.NewMock()
//
// 	testSuite.InterceptorTestSuite = &testpb.InterceptorTestSuite{
// 		TestService: &shared.TestJwtAuthPingService{
// 			TestServiceServer: &testpb.TestPingService{},
// 			T:                 t,
// 		},
// 		ServerOpts: []grpc.ServerOption{
// 			grpc.ChainUnaryInterceptor(
// 				logging.UnaryServerInterceptor(internal.InterceptorLogger(), internal.LogInterceptorOpts...),
// 				auth.UnaryServerInterceptor(testSuite.authServerInterceptor.GetAuthFunc()),
// 			),
// 		},
// 		ClientOpts: []grpc.DialOption{
// 			grpc.WithUnaryInterceptor(client.NewAuthClientInterceptor().UnaryHeaderAuthorizeForwarder()),
// 			grpc.WithStreamInterceptor(client.NewAuthClientInterceptor().UnaryStreamHeaderAuthorizeForwarder()),
// 		},
// 	}
//
// 	suite.Run(t, testSuite)
// }

// func (s *AuthClientInterceptorTestSuite) BeforeTest(_, _ string) {
// 	s.mockJwtToken.ExpectedCalls = nil
// 	s.mockJwtToken.Calls = nil
// }

// func (s *AuthClientInterceptorTestSuite) AfterTest(_, _ string) {
// 	s.True(s.mockJwtToken.AssertExpectations(s.T()))
// }

// func (s *AuthClientInterceptorTestSuite) TestUnary_BadToken() {
// 	ctx := metadata.AppendToOutgoingContext(s.SimpleCtx(), "Authorization", "bad-token")
// 	pingResponse, err := s.Client.Ping(ctx, shared.TestGoodPing)
// 	s.Error(err)
//
// 	grpcErr, ok := status.FromError(err)
// 	s.True(ok)
//
// 	s.Equal(codes.Unauthenticated, grpcErr.Code())
// 	s.ErrorAs(grpcErr.Err(), "Bad authorization string")
//
// 	s.Nil(pingResponse)
// }

// func (s *AuthClientInterceptorTestSuite) TestUnary_WithoutToken() {
// 	pingResponse, err := s.Client.Ping(context.Background(), shared.TestGoodPing)
// 	s.NoError(err)
// 	s.Equal("something-00000000-0000-0000-0000-000000000000", pingResponse.Value)
// }

// func (s *AuthClientInterceptorTestSuite) TestUnary_WithToken() {
// 	s.mockJwtToken.On(
// 		"Parse", mock.Anything, mock.MatchedBy(
// 			func(token string) bool {
// 				return "mock-token" == token
// 			},
// 		),
// 	).Return(&model.SessionUser{UID: uuid.Nil}, nil)
// 	s.mockJwtToken.On(
// 		"Parse", mock.Anything, mock.MatchedBy(
// 			func(token string) bool {
// 				return "mock-another-token" == token
// 			},
// 		),
// 	).Return(nil, errors.New("bad token"))
//
// 	ctx := metadata.AppendToOutgoingContext(s.SimpleCtx(), "Authorization", "bearer mock-token")
// 	pingResponse, err := s.Client.Ping(ctx, shared.TestGoodPing)
// 	s.NoError(err)
// 	s.Equal("something-00000000-0000-0000-0000-000000000000", pingResponse.Value)
//
// 	ctx = metadata.AppendToOutgoingContext(s.SimpleCtx(), "Authorization", "bearer mock-another-token")
// 	pingResponse, err = s.Client.Ping(ctx, shared.TestGoodPing)
// 	s.Error(err)
// 	s.Nil(pingResponse)
// }
